
 【F5】  Step into 跳入
 【F6】  Step over 下一步
 【F7】  Step return 跳出
 【F8】  resume 恢复

================================【struts运行过程】===================
1.浏览器的各种事件，发起一个URL的请求，
2.被项目的过滤器监听到了，调用对应的action，(需要配置好xml文件的package和action标签）
3.由action里运行方法（这里是真正的代码处理的地方）的return值来确定等会跳转的结果页面（配置xml文件的result标签）


==================搭建Struts2开发环境=================
（或者直接使用MyEclipse的快速搭建，struts2.1+Hibernate3.3.2+JSTL1.2.2(本机jdk7.45+tomcat7.08)）
1.找到Struts2应用所需要使用到的JAR包（特别注意不能和Hibernate的JAR包有重复的，不然就报错）
	**Struts2.33版本的开发必须JAR包：路径在 f:\Tool\AllJar\SSH\struts23
		sm-3.3.jar
		sm-commons-3.3.jar
		sm-tree-3.3.jar
		ommons-fileupload-1.2.2.jar
		ommons-io-2.0.1.jar
		ommons-lang3-3.1.jar
		ommons-logging-1.1.1.jar
		reemarker-2.3.19.jar
		avassist-3.11.0.GA.jar
		gnl-3.0.5.jar
		truts2-core-2.3.3.jar
		work-core-2.3.3.jar

2. 创建JSP文件

3. 创建Action文件（实现了Struts的Action接口的普通类,或者继承ActionSupport类）

4. 编写Struts2的配置文件Struts.xml

5. 在web.xml中加入Struts2 框架启动的过滤器配置（核心过滤器）

================================================
================================================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>
	<!-- /primer/helloWorldAction.action
		package：包
			* name：包名，唯一的，必选项
			* namespace：命名空间，唯一的，相当于房间号。可选项，省略情况下是"/"。页面中请求连接的前半部分
			* extends：继承 可以将Action继承下去
				* extends="struts-default"：struts2框架底层提供的核心包struts2-core-2.3.3.jar下的struts-default.xml文件
	 -->
	<package name="primer" namespace="/primer" extends="struts-default">
		<!-- 
			action：
				* name：对应页面中请求连接的后面半部分
				* class：对应要执行的类的完整路径
		 -->
		<action name="helloWorldAction" class="cn.itcast.primer.HelloWorldAction">
			<!-- 
				result：结果类型
					* name：对应的是执行的类的方法的返回值
						public String execute() throws Exception {
							System.out.println("HelloWorldAction ************* execute()");
							return "success";
						}
					* 后半部分的文本内容：要转向到的页面
			 -->
			<result name="success">/primer/success.jsp</result>
		</action>
	</package> 
</struts>
================================================
================================================
==访问Action的URL：
	package的namespace加上Action的名字加上后缀

==URL 默认搜索特性 ：
	/a/b/c/d/df.action
	/a/df.action
	*这两个是等价的，上面长的那个同样分解为两部分，前半部分的路径是从d到a
	依次向上搜索的，直到找到，否则才会报错，所以说，只要根是对的，中间可以乱写，但是会影响性能

==如果没有给Action指定class：
	struts.xml继承的struts-default.xml 中配置了一个默认的class，所以说不会报错
	<default-class-ref name=""/>

==如果找不到Action：
	就需要配置默认的Action名称，没有的话，就会报错。有就执行那个了
	<default-action-ref name=""/>

==URL的后缀名可以自定义（会覆盖原本的配置）
在struts.xml 中配置:
	（使用多个的话，用逗号分隔）默认是action和空
	name : 框架自带配置文件 default.properties中常量名
	value ：常量值
	<constan name="struts.action.extension" value="myth"></constant>
或者：
	src下新建一个default.properties 里面只写需要修改的常量
		struts.action.extension=myth 
	
	若两者都修改了按以下顺序：
	1 struts-default.xml
	2 struts-plugin.xml
	3 struts.xml
	4 struts.properties
	5 web.xml
	若有相同的常量配置好，后者覆盖前者
建议在struts.xml中配置

<!-- 配置URL后缀 默认是action或空-->
	<constant name="struts.action.extension" value="myth"></constant>
	<!-- 配置国际化资源文件被修改时，是否重新加载 默认是false -->
	<!-- <constant name="struts.i18n.reload" value="true"></constant> -->
	<!-- 配置struts2框架的配置文件修改时，是否重新加载 默认是false-->
	<!-- <constant name="struts.configuration.xml.reload" value="true"></constant> -->
	<!--
		 配置struts2的模式 
			false 生产模式 默认是false
			true 开发模式 需要更多的调试信息 会自动将上面两个常量设置为true
	-->
	<constant name="struts.devMode" value="true"></constant>
================================================================
自定义使用的 struts.xml 不仅路径，还有名字，方便多人开发
需要在struts.xml中写一个<include file=""></include>路径都是以src为起点，注意把点换成  /

==================【action类型转换】===========================
1、在JSP页面上的输入框提交给action时，只要在action中声明同名变量，定义setget方法
	那之后直接使用get方法就能获取到值，封装成对象再setget也是一样可以的但是在JSP上的input的name上要加对象名做前缀
	还可以批量添加数据，就使用Collection集合 Collection<T> ts;同样的加setget方法，但是在JSP上的多个input的name就要写成这种格式
		ts[0].name ts[1].name......




2、当struts有些类型无法转换时，就需要自定义转换器
	【基于字段】（局部）
		* 在当前action包下新建 convert.properties 文件名是自定义的
		* 在该文件中 xwork.default.fieldvalue=无效的字段值 "{0}".
		* 在struts.xml文件加载该资源文件
			<constant name="struts.custom.i18n.resources" 
				value="cn.itcast.converter.converter,
						cn.itcast.i18n.resources">
		</constant>
	【基于类】（全局）：
		* 在src目录下新建一个xwork-conversion.properties文件
		* 内容： 待转换的类型=类型转换器的全类名
			例如：java.util.Date=cn.itcast.convert.DataConverter
3、result标签名为input的是默认为错误页面的跳转方向
	在错误页面调出错误信息：<s:fielderror fieldName="createTime"/>
	【针对每个字段给出提示信息】
		在converte.properties中添加一行invalid.fieldvalue.createTime=****

【注意】
	JSP页面中引入struts标签<%@ taglib uri="/struts-tags" prefix="s" %>
	* 创建完文件后记得一定要添加到struts.xml文件中去，若没加，也可以在JSP页面中直接使用
==========================【与Servlet解耦】====================================
struts2 对 HttpServletRequest HttpSession ServletContext进行了封装成了Map对象
【方法一】:   通过ServletActionContext类直接获取
	这个类是action执行的上下文对象，包括了parameter request session application等。
//分别三个属性的设置request session application
	HttpServletRequest request = ServletActionContext.getRequest();
		request.setAttribute("username", "username_request");
	Map sessionMap = ServletActionContext.getContext().getSession();
		sessionMap.put("username", "username_session");
	ServletContext sc = ServletActionContext.getServletContext();
		sc.setAttribute("username", "username_application");
//JSP页面的获取：
    ${requestScope.username}<br>
    ${sessionScope.username}<br>
    ${applicationScope.username}<br>

【通过实现接口struts2自动注入】
	实现这四个接口：ServletRequestAware，ServletResponseAware，ServletContextAware，SessionAware
	实例化对象分别是HttpServletRequest，HttpServletResponse，Map，ServletContext
	重写四个set方法，方法体写上this.** = **;

=============================【文件上传】================================
【1】套路一致，但是在配置时，action里一定有input的result才可以
【2】<!-- 配置文件上传的总大小 -->
	<constant name="struts.multipart.maxSize" value="2097152000"></constant>
【3】错误提示配置
新建一个properties文件，名字自定义
	struts.messages.error.uploading=Error uploading: {0}
	struts.messages.error.file.too.large=File too large: {0} "{1}" "{2}" {3}
	struts.messages.error.content.type.not.allowed=Content-Type not allowed: {0} "{1}" "{2}" {3}
	struts.messages.error.file.extension.not.allowed=File extension not allowed: {0} "{1}" "{2}" {3}
	{0}：<input>标签的name 属性值
	{1}：上传文件的真实名称
	{2}：上传文件保存到临时目录的名称
	{3}：上传文件的类型（对于too.large来说是上传文件的大小）
	
	加入到struts配置文件中去
=============================================================
struts2框架的文件上传：
	* 单文件上传：
		* 在动作类action中声明相关属性：
			* 在动作类action中，要声明与页面中表单name属性同名的属性，同名的属性的类型时File类型；
			* 在动作类action中，要声明[同名的属性]ContentType，类型时String类型；
			* 在动作类action中，要声明[同名的属性]FileName，类型时String类型
			* 给所有属性提供get和set方法
		* 在业务方法中，处理文件上传：
			* 获取要上传文件的路径，保存的位置
			* 在目标文件夹内，创建一个与上传文件同名的文件
			* 通过FileUtils工具类提供copyFile()方法，将临时文件内容拷贝到目标文件夹下的那个同名的文件
		* 设置上传文件的总大小
			* 在struts.xml文件中，<constant name="struts.multipart.maxSize" value="2097152000"></constant>
		* 设置上传文件的大小、类型和扩展名：
			* 在自定义的配置文件中，在action标签下：
				<!-- 配置拦截器的参数，这里是文件上传拦截器 -->
				<interceptor-ref name="defaultStack">
	              	<!-- 
	              		配置文件上传拦截器的参数
	              			* 与定义参数的顺序无关
	              			* 允许的类型(allowedTypes)和允许的扩展名(allowedExtensions)必须保持一致
	              	 -->
	              	<!-- 
	              		* 配置上传文件的大小
	              			* struts.xml文件中配置的是上传文件的总大小
	              			* 这里配置的是上传文件的单个大小
	              	 -->
	              	<param name="fileUpload.maximumSize">20971520</param>
	              	<!-- 配置上传文件允许的类型，如果配置多个值的话，用","隔开 -->
	              	<param name="fileUpload.allowedTypes">text/plain,application/msword</param>
	              	<!-- 配置上传文件的扩展名，如果配置多个值的话，用","隔开 -->
	              	<param name="fileUpload.allowedExtensions">.txt</param>
	            </interceptor-ref>
	         * 自定义上传文件的错误提示信息：
	         	* 在动作类action同目录下，创建一个名为fileuploadmessage.properties资源文件(名为自定义)
	         	* 改资源文件配置如下：
	         		struts.messages.error.uploading=Error uploading: {0}
					struts.messages.error.file.too.large=File too large: {0} "{1}" "{2}" {3}
					struts.messages.error.content.type.not.allowed=Content-Type not allowed: {0} "{1}" "{2}" {3}
					struts.messages.error.file.extension.not.allowed=File extension not allowed: {0} "{1}" "{2}" {3}
		
		
	* 多文件上传：
		* 所有流程于配置都与单文件上传一致。
		* 需要注意的是：
			* 在页面中，虽然是多文件上传，但是页面中表单的name属性的值必须保持一致；
			* 在动作类action中声明的相关属性，类型改成数组；
			* 在业务方法中，相关处理流程改成单文件上传的循环。
		
		